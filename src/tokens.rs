pub mod token {

    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum Token {
        ADD,
        SUB,
        MUL,
        DIV,
        OPENP,
        CLOSEP,
        IDENTIFIER,
        FORLOOP,
        WHILELOOP,
        ASSIGNMENT,
        SEMICOLON,
        DOT,
        CURLYOP,
        CURLYCP,
        FUNCTION,
        BANG,
        BANGEQUAL,
        EQUAL,
        GREATER,
        GREATEREQUAL,
        LESS,
        LESSEQUAL,
        IF,
        ELIF,
        ELSE,
        OR,
        AND,
        TRUE,
        FALSE,
    }

    impl Token {
        pub fn new(s: &str) -> Self {
            match s {
                "+" => Self::ADD,
                "-" => Self::SUB,
                "*" => Self::MUL,
                "/" => Self::DIV,
                "(" => Self::OPENP,
                ")" => Self::CLOSEP,
                "let" => Self::IDENTIFIER,
                "for" => Self::FORLOOP,
                "while" => Self::WHILELOOP,
                "=" => Self::ASSIGNMENT,
                ";" => Self::SEMICOLON,
                "." => Self::DOT,
                "{" => Self::CURLYOP,
                "}" => Self::CURLYCP,
                "proc" => Self::FUNCTION,
                "!" => Self::BANG,
                "!=" => Self::BANGEQUAL,
                ">" => Self::GREATER,
                ">=" => Self::GREATEREQUAL,
                "<" => Self::LESS,
                "<=" => Self::LESSEQUAL,
                "if" => Self::IF,
                "elif" => Self::ELIF,
                "else" => Self::ELSE,
                "||" => Self::OR,
                "&&" => Self::AND,
                "true" => Self::TRUE,
                "false" => Self::FALSE,
                _ => panic!("unexpected token"),
            }
        }
    }
}
